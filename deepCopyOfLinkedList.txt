/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { 
         this.label = x; 
        }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null){// edge case 1
            return  head;
        }else if(head.next ==null){// edge case 2
            RandomListNode copy = new RandomListNode(head.label);
            copy.random = head.random;
            return copy;
        }
        RandomListNode temp = head;

        // 1->2->3->4->5
        // 1->1'->2->2'->3->3'->4->4'->5-5'
        // creating copy nodes next to original Ex- 
        while(temp !=null){
            RandomListNode copy = new RandomListNode(temp.label);
            copy.next = temp.next;
            temp.next = copy;
            temp = temp.next.next;
        }
        temp = head;
        // createing random node on copy node
        while(temp.next !=null){
            RandomListNode copytemp = temp.next;
            if(temp.random == null){
                copytemp.random = null;
            }else {
                 copytemp.random =  temp.random.next;
            }
            if(temp.next.next == null){
                break;
            }
            temp = temp.next.next;
        }
        // ditaching ths copy nodes and creating new copy
        RandomListNode original = head;
        RandomListNode copyHead = head.next;
        RandomListNode copy = copyHead;
        while(original != null && copy.next !=null){
            original.next = original.next.next;
            copy.next = copy.next.next;
            original = original.next;
            copy = copy.next;
        }
        original.next =null;
        copy.next = null;
        return copyHead;
    }
}
