public static class UserQueue {
    int size =0;
    Stack<Integer>st1 = new Stack<>();
    Stack<Integer>st2 = new Stack<>();

    UserQueue() {
        
    }
    
    /** Push element X to the back of queue. */
     void push(int X) {
        st1.push(X);
        return ;
    }
    
    /** Removes the element from in front of queue and returns that element. */
     int pop() {
        if(st1.isEmpty() && st2.isEmpty()){
            return Integer.MIN_VALUE;
        }
        if(st2.isEmpty()){
            while(!st1.isEmpty()){
                st2.push(st1.pop());
            }
        }
        return st2.pop();
    }
    
    /** Get the front element of the queue. */
     int peek() {
        if(st1.isEmpty() && st2.isEmpty()){
            return Integer.MIN_VALUE;
        }
        if(st2.isEmpty()){
            while(!st1.isEmpty()){
                st2.push(st1.pop());
            }
        }
        return st2.peek();
        
    }
    
    /** Returns whether the queue is empty. */
     boolean empty() {
        if(st1.isEmpty() && st2.isEmpty()){
            return true;
        }
        return false;
    }
}

/**
 * Your UserQueue object will be instantiated and called as such:
 * UserQueue obj = new UserQueue();
 * obj.push(X);
 * int param2 = obj.pop();
 * int param3 = obj.peek();
 * boolean param4 = obj.empty();
 */